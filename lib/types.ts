import { z } from 'zod';

// Humor styles available
export const HumorStyle = z.enum(['dad-joke', 'office-safe', 'edgy', 'pg']);
export type HumorStyle = z.infer<typeof HumorStyle>;

// Gift request schema with relaxed validation
export const GiftRequestSchema = z.object({
  recipientDescription: z.string()
    .min(5, 'Please provide at least a few words about the recipient')
    .max(2000, 'Description is too long (max 2000 characters)')
    .trim(),
  occasion: z.string()
    .max(500, 'Occasion description is too long (max 500 characters)')
    .trim()
    .optional(),
  humorStyle: HumorStyle.default('dad-joke'),
  minPrice: z.number().min(0).max(10000).default(10),
  maxPrice: z.number().min(0).max(10000).default(50),
});

export type GiftRequest = z.infer<typeof GiftRequestSchema>;

// Product from Amazon/Etsy
export interface Product {
  id: string;
  title: string;
  price: number;
  currency: string;
  imageUrl: string;
  affiliateUrl: string;
  source: 'amazon' | 'etsy';
  rating?: number;
  reviewCount?: number;
}

// Gift idea generated by AI (for API responses and client-side use)
export interface GiftIdea {
  id: string;
  title: string; // Punny title
  tagline: string; // Funny one-liner
  description: string; // Why this gift bundle works
  products: Product[];
  humorStyle?: HumorStyle; // Optional for backward compatibility
}

// Complete gift response
export interface GiftResponse {
  slug: string; // Unique permalink identifier
  giftIdeas: GiftIdea[];
  request: GiftRequest;
  createdAt: Date;
}

// Database schema for permalinks
export interface PermalinkRecord {
  id: string;
  slug: string;
  recipient_description: string;
  occasion?: string;
  humor_style: HumorStyle;
  min_price: number;
  max_price: number;
  gift_ideas: GiftIdea[];
  created_at: Date;
  view_count: number;
}
